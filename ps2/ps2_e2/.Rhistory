# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
propensity.forest = regression_forest(covariates, treat)
W.hat = predict(propensity.forest)$predictions
hist(W.hat, xlab = "propensity score")
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- ate["estimate"] - 1.96 * ate["std.err"]
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- ate["estimate"] - 1.96 * ate["std.err"]
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- cate["estimate"] - 1.96 * cate["std.err"]
ci_upper <- cate["estimate"] + 1.96 * cate["std.err"]
cat("ATE:", cate["estimate"],
"\nStd. Error:", cate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
View(df)
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.factor(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.factor(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.factor(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a factor (dummy)
df$urbanization_dummy <- as.factor(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a factor
df$state_id <- as.factor(df$st)
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a factor (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a factor
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- cate["estimate"] - 1.96 * cate["std.err"]
ci_upper <- cate["estimate"] + 1.96 * cate["std.err"]
cat("ATE:", cate["estimate"],
"\nStd. Error:", cate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
expanded_data <- read.csv(data_url)
# Structure the dataset
expanded_data_1 <- expanded_data
#===============================================================================
#EXERCISE 2#
#===============================================================================
# POINT A
#-------------------------------------------------------------------------------
# Load the dataset
library(readr)
library(grf)
library(dplyr)
library(ggplot2)
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
expanded_data <- read.csv(data_url)
# Structure the dataset
expanded_data_1 <- expanded_data
expanded_data_1$lfdivlaw_dummy <-as.numeric(expanded_data$year>=expanded_data$lfdivlaw)
expanded_data_1 <- expanded_data_1 %>%
relocate(lfdivlaw_dummy, .after =lfdivlaw )
state_one_hot <- model.matrix(~ st - 1, data = expanded_data_1)
expanded_data_1 <- cbind(expanded_data_1, state_one_hot)
urbanization_one_hot <- model.matrix(~ urbanization - 1, data = expanded_data_1)
expanded_data_1<- cbind(expanded_data_1, urbanization_one_hot)
#we drop state and urbanization which we won't need
expanded_data_1 <- expanded_data_1[,!(names(expanded_data_1) %in% c("st", "urbanization"))]
Y <- expanded_data$div_rate_sim
W <- as.numeric(expanded_data_1$lfdivlaw_dummy)
X <- expanded_data_1[, !(names(expanded_data_1) %in% c("div_rate_sim","year", "lfdivlaw", "lfdivlaw_dummy", "county_id"))]
X <- as.matrix(X)
CF_model <- causal_forest(X,Y, W )
ate <- average_treatment_effect(CF_model)
print(ate)
blp <- best_linear_projection(CF_model, X)
print(blp)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a factor (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a factor
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- cate["estimate"] - 1.96 * cate["std.err"]
ci_upper <- cate["estimate"] + 1.96 * cate["std.err"]
cat("ATE:", cate["estimate"],
"\nStd. Error:", cate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
varimp <- variable_importance(tau.forest)
ranked.vars <- order(varimp, decreasing = TRUE)
colnames(covariates)[ranked.vars[1:5]]
propensity.forest = regression_forest(covariates, treat)
W.hat = predict(propensity.forest)$predictions
hist(W.hat, xlab = "propensity score")
blp <- best_linear_projection(tau.forest, covariates[ranked.vars[1:5]])
print(blp)
full_predict <- predict(tau.forest)
cate <- full_predict$predictions
# Sorting CATE in descending order
order_idx <- order(cate, decreasing = TRUE)
cate_sorted <- cate[order_idx]
# Computing cumulative gain
cumulative_gain <- cumsum(cate_sorted)
normalized_gain <- cumulative_gain / sum(cate_sorted)
population_fraction <- seq_along(cate_sorted) / length(cate_sorted)
toc_data <- data.frame(
population_fraction = population_fraction,
normalized_gain = normalized_gain
)
# Plot the TOC curve with ggplot2
ggplot(toc_data, aes(x = population_fraction, y = normalized_gain)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "steelblue") +
labs(title = "Targeting Operator Characteristic (TOC)",
x = "Fraction of Population Targeted",
y = "Normalized Cumulative Gain") +
theme_minimal()
cate_data <- data.frame(cate = cate)
ggplot(cate_data, aes(x = cate)) +
geom_histogram(bins = 30, fill = "steelblue", color = "darkgray") +
labs(title = "Distribution of Estimated CATEs",
x = "Estimated CATE",
y = "Frequency") +
theme_minimal()
rate.educ.rate <- rank_average_treatment_effect(
tau.forest,
covariates$education_rate,
subset = !is.na(covariates$education_rate) # Ignore missing X-values
)
plot(rate.educ.rate, xlab = "Treated fraction", ylab = "Increase in divorce rates", main = "TOC: By increasing education rate")
rate.educ.rate
#| label: Heterogeneity Driver: education_rate
scatter_data <- data.frame(
driver = df$education_rate,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "firebrick") +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE") +
theme_minimal()
rate.rel.ad <- rank_average_treatment_effect(
tau.forest,
-1 * covariates$religious_adherence, # Multiply by -1 to order by decreasing index
subset = !is.na(covariates$religious_adherence) # Ignore missing X-values
)
plot(rate.rel.ad, xlab = "Treated fraction", ylab = "Increase in divorce rates", main = "TOC: By increasing religious adherence")
rate.rel.ad
#| label: Heterogeneity Driver: religious_adherence
scatter_data <- data.frame(
driver = df$religious_adherence,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "firebrick") +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE") +
theme_minimal()
rate.wlfp <- rank_average_treatment_effect(
tau.forest,
covariates$women_labor_force_participation, # Multiply by -1 to order by decreasing index
subset = !is.na(covariates$women_labor_force_participation) # Ignore missing X-values
)
plot(rate.wlfp, xlab = "Treated fraction", ylab = "Increase in divorce rates", main = "TOC: By increasing women labour force participation")
#| label: Heterogeneity Driver: women_labor_force_participation
scatter_data <- data.frame(
driver = df$women_labor_force_participation,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "firebrick") +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE") +
theme_minimal()
