#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
#| label: Estimating the causal forest
# Fit the causal forest
cf <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
ate <- average_treatment_effect(cf,
target.sample = "overlap")
ate
ci_lower <- ate["estimate"] - 1.96 * ate["std.err"]
ci_upper <- ate["estimate"] + 1.96 * ate["std.err"]
cat("ATE:", ate["estimate"],
"\nStd. Error:", ate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
View(df)
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
ate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
ate
ci_lower <- ate["estimate"] - 1.96 * ate["std.err"]
ci_upper <- ate["estimate"] + 1.96 * ate["std.err"]
cat("ATE:", ate["estimate"],
"\nStd. Error:", ate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
tau.forest <- causal_forest(X, Y, W, num.trees = 4000)
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
ate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
ate
ci_lower <- ate["estimate"] - 1.96 * ate["std.err"]
ci_upper <- ate["estimate"] + 1.96 * ate["std.err"]
cat("ATE:", ate["estimate"],
"\nStd. Error:", ate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
tau.forest <- causal_forest(covariates,
outcome,
treat
)
tau.hat <- predict(tau.forest,
X.test,
estimate.variance = TRUE)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
# IMPORTANT: run twice to solve the errors
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
#Define `urbanization` as a numerical dummy
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
#Define `st` as a numerical variable
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- df$div_rate_sim
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
df$treatment <- ifelse(df$year >= df$lfdivlaw, 1, 0)
treat <- df$treatment
# The covariates X used in the causal regression.
covariates <- subset(df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending",
"state_id",
"county_id")
)
propensity.forest = regression_forest(covariates, treat)
W.hat = predict(propensity.forest)$predictions
hist(W.hat, xlab = "propensity score")
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- ate["estimate"] - 1.96 * ate["std.err"]
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- ate["estimate"] - 1.96 * ate["std.err"]
#| label: Estimating the causal forest
# Fit the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
# Estimate the average treatment effect (ATE)
cate <- average_treatment_effect(tau.forest,
target.sample = "overlap")
cate
ci_lower <- cate["estimate"] - 1.96 * cate["std.err"]
ci_upper <- cate["estimate"] + 1.96 * cate["std.err"]
cat("ATE:", cate["estimate"],
"\nStd. Error:", cate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
