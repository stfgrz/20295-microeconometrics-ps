effect    = rate.cate$estimate
)
samples.by.state <- split(seq_along(final_df$state_id), final_df$state_id)
num.states <- length(samples.by.state)
train <- unlist(samples.by.state[sample(1:num.states, num.states / 2)])
# Training forest (In-bag)
train.forest <- causal_forest(
covariates[train, ],
outcome[train],
treat[train],
W.hat = 0.5,
clusters = final_df$state_id[train])
tau.hat.eval <- predict(train.forest,covariates[-train, ])$predictions
# Evaluation forest (Out-of-bag)
eval.forest <- causal_forest(
covariates[-train, ],
outcome[-train],
treat[-train],
W.hat = 0.5,
clusters = final_df$state_id[-train])
rate.cate <- rank_average_treatment_effect(eval.forest, tau.hat.eval)
plot(rate.cate, main = "TOC: By decreasing estimated CATE")
print(rate.cate)
rate.cate_estimate <- as.numeric(rate.cate[1])
rate_se <- as.numeric(rate.cate[2])
ci_lower95_rate <- rate.cate_estimate - 1.96 * rate_se
ci_upper95_rate <- rate.cate_estimate + 1.96 * rate_se
cat("AUTOC:", ci_lower95_rate, ",", ci_upper95_rate)
ci_lower_rate.cate <- rate.cate["estimate"] - 1.96 * rate.cate["std.err"]
ci_lower_rate.cate <- rate.cate["estimate"] - 1.96 * rate.cate["std.err"]
ci_lower_rate.cate <- rate.cate$estimate - 1.96 * rate.cate$std.err
ci_upper_rate.cate <- rate.cate$estimate + 1.96 * rate.cate$std.err
cat("CATE:", rate.cate$estimate,
"\nStd. Error:", rate.cate$std.err,
"\n95% CI: [", ci_lower_rate.cate, ", ", ci_upper_rate.cate, "]\n")
cate_data <- data.frame(cate = cate)
ggplot(cate_data, aes(x = cate)) +
geom_histogram(bins = 30, fill = "steelblue", color = "darkgray") +
labs(title = "Distribution of Estimated CATEs",
x = "Estimated CATE",
y = "Frequency") +
theme_minimal()
cate_data <- data.frame(cate = cate)
ggplot(cate_data, aes(x = cate)) +
geom_histogram(bins = 100, fill = "steelblue", color = "darkgray") +
labs(title = "Distribution of Estimated CATEs",
x = "Estimated CATE",
y = "Frequency") +
theme_minimal()
rate.educ.rate <- rank_average_treatment_effect(
tau.forest,
covariates$education_rate,
subset = !is.na(covariates$education_rate) # Ignore missing X-values
)
plot(rate.educ.rate, xlab = "Treated fraction", ylab = "Increase in divorce rates", main = "TOC: By increasing education rate")
rate.educ.rate
#| label: Heterogeneity Driver: education_rate
scatter_data <- data.frame(
driver = df$education_rate,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate, color = factor(treat))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "orange") +
geom_smooth(aes(group = factor(treat)), method = "loess", se = TRUE) +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE",
color = "Treatment Group") +
theme_minimal()
rlang::last_trace()
#| label: Heterogeneity Driver: education_rate
scatter_data <- data.frame(
driver = df$education_rate,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate, color = factor(treat))) +
geom_point(aes(color = factor(treat)), alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "orange") +
geom_smooth(aes(group = factor(treat)), method = "loess", se = TRUE) +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE",
color = "Treatment Group") +
theme_minimal()
#| label: Heterogeneity Driver: education_rate
scatter_data <- data.frame(
driver = df$education_rate,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate)) +
geom_point(aes(color = factor(treat)), alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "orange") +
geom_smooth(aes(group = factor(treat)), method = "loess", se = TRUE) +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE",
color = "Treatment Group") +
theme_minimal()
rate.rel.ad <- rank_average_treatment_effect(
tau.forest,
-1 * covariates$religious_adherence, # Multiply by -1 to order by decreasing index
subset = !is.na(covariates$religious_adherence) # Ignore missing X-values
)
plot(rate.rel.ad, xlab = "Treated fraction", ylab = "Increase in divorce rates", main = "TOC: By increasing religious adherence")
rate.rel.ad
#| label: Heterogeneity Driver: religious_adherence
scatter_data <- data.frame(
driver = df$religious_adherence,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate, color = factor(treat))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "orange") +
geom_smooth(aes(group = factor(treat)), method = "loess", se = TRUE) +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE",
color = "Treatment Group") +
theme_minimal()
View(rate.cate)
ggplot(scatter_data, aes(x = driver, y = cate)) +
geom_point() +
geom_errorbar(
aes(
ymin = estimate - 1.96*std.err,
ymax = estimate + 1.96*std.err
),
width = 0.02
) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(
x    = "Treated fraction (q)",
y    = "Increase in divorce rates",
title= "TOC: By increasing education rate"
)
#| label: Heterogeneity Driver: education_rate
scatter_data <- data.frame(
driver = final_df$education_rate,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate)) +
geom_point(aes(color = factor(treat)), alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "orange") +
geom_smooth(aes(group = factor(treat)), method = "loess", se = TRUE) +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE",
color = "Treatment Group") +
theme_minimal()
#| label: Heterogeneity Driver: education_rate
scatter_data <- data.frame(
driver = final_df$education_rate,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate)) +
geom_point(aes(color = factor(treat)), alpha = 0.5) +
geom_smooth(aes(group = factor(treat)), method = "loess", se = TRUE) +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE",
color = "Treatment Group") +
theme_minimal()
#| label: Heterogeneity Driver: religious_adherence
scatter_data <- data.frame(
driver = final_df$religious_adherence,
cate = cate
)
ggplot(scatter_data, aes(x = driver, y = cate, color = factor(treat))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", se = TRUE, color = "orange") +
geom_smooth(aes(group = factor(treat)), method = "loess", se = TRUE) +
labs(title = "Relationship between Driver and Estimated Treatment Effects",
x = "Driver",
y = "Estimated CATE",
color = "Treatment Group") +
theme_minimal()
rate.wlfp <- rank_average_treatment_effect(
tau.forest,
covariates$women_labor_force_participation, # Multiply by -1 to order by decreasing index
subset = !is.na(covariates$women_labor_force_participation) # Ignore missing X-values
)
plot(rate.wlfp, xlab = "Treated fraction", ylab = "Increase in divorce rates", main = "TOC: By increasing women labour force participation")
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
library(stargazer)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(
treated = ifelse(
lfdivlaw >= 1968 & lfdivlaw <= 1978, 1, 0)
)
# We tried defining as factors but some grf functions only work with numbers
#| label: Turning the data into first differences
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
baseline_df <- df %>%
filter(year == 1968)
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
# I don't really understand how we created the .x and .y divorce rate variables -> STICK TO THE Y VERSION, IT IS CORRECT
head(final_df)
#| label: Defining the variables of interest
outcome <- final_df$div_rate_diff.y
treat <- final_df$treated
covariates <- subset(final_df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending")
)
#| label: Estimating the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
cate <- average_treatment_effect(tau.forest,
target.sample = "all")
cate
ci_lower <- cate["estimate"] - 1.96 * cate["std.err"]
ci_upper <- cate["estimate"] + 1.96 * cate["std.err"]
cat("ATE:", cate["estimate"],
"\nStd. Error:", cate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
varimp <- variable_importance(tau.forest)
ranked.vars <- order(varimp, decreasing = TRUE)
colnames(covariates)[ranked.vars[1:5]]
propensity.forest = regression_forest(covariates, treat)
W.hat = predict(propensity.forest)$predictions
hist_df <- data.frame(propensity = W.hat)
ggplot(hist_df, aes(x = propensity)) +
geom_histogram(
binwidth   = 0.01,           # adjust bin width to taste
fill       = "steelblue",    # nice solid fill color
color      = "white",        # border color between bins
alpha      = 0.8             # slight transparency
) +
labs(
title = "Distribution of Propensity Scores",
x     = "Propensity Score",
y     = "Count"
) +
theme_minimal() +              # clean, uncluttered look
theme(
plot.title   = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title   = element_text(size = 14),
axis.text    = element_text(size = 12)
)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
library(stargazer)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(
treated = ifelse(
lfdivlaw >= 1968 & lfdivlaw <= 1978, 1, 0)
)
# We tried defining as factors but some grf functions only work with numbers
#| label: Turning the data into first differences
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
baseline_df <- df %>%
filter(year == 1968)
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
# I don't really understand how we created the .x and .y divorce rate variables -> STICK TO THE Y VERSION, IT IS CORRECT
head(final_df)
#| label: Defining the variables of interest
outcome <- final_df$div_rate_diff.y
treat <- final_df$treated
covariates <- subset(final_df,
select = c("education_rate",
"childcare_availability",
"unemployment_rate",
"median_income",
"urbanization_dummy",
"marriage_rate",
"religious_adherence",
"alcohol_consumption",
"domestic_violence_rate",
"women_labor_force_participation",
"crime_rate",
"social_services_spending")
)
#| label: Estimating the causal forest
tau.forest <- causal_forest(covariates,
outcome,
treat
)
cate <- average_treatment_effect(tau.forest,
target.sample = "all")
cate
ci_lower <- cate["estimate"] - 1.96 * cate["std.err"]
ci_upper <- cate["estimate"] + 1.96 * cate["std.err"]
cat("ATE:", cate["estimate"],
"\nStd. Error:", cate["std.err"],
"\n95% CI: [", ci_lower, ", ", ci_upper, "]\n")
varimp <- variable_importance(tau.forest)
ranked.vars <- order(varimp, decreasing = TRUE)
colnames(covariates)[ranked.vars[1:5]]
propensity.forest = regression_forest(covariates, treat)
W.hat = predict(propensity.forest)$predictions
hist_df <- data.frame(propensity = W.hat)
ggplot(hist_df, aes(x = propensity)) +
geom_histogram(
binwidth   = 0.01,           # adjust bin width to taste
fill       = "steelblue",    # nice solid fill color
color      = "white",        # border color between bins
alpha      = 0.8             # slight transparency
) +
labs(
title = "Distribution of Propensity Scores",
x     = "Propensity Score",
y     = "Count"
) +
theme_minimal() +              # clean, uncluttered look
theme(
plot.title   = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title   = element_text(size = 14),
axis.text    = element_text(size = 12)
)
blp <- best_linear_projection(tau.forest, covariates[ranked.vars[1:5]])
print(blp)
samples.by.state <- split(seq_along(final_df$state_id), final_df$state_id)
num.states <- length(samples.by.state)
train <- unlist(samples.by.state[sample(1:num.states, num.states / 2)])
# Training forest (In-bag)
train.forest <- causal_forest(
covariates[train, ],
outcome[train],
treat[train],
W.hat = 0.5,
clusters = final_df$state_id[train])
tau.hat.eval <- predict(train.forest,covariates[-train, ])$predictions
# Evaluation forest (Out-of-bag)
eval.forest <- causal_forest(
covariates[-train, ],
outcome[-train],
treat[-train],
W.hat = 0.5,
clusters = final_df$state_id[-train])
rate.cate <- rank_average_treatment_effect(eval.forest, tau.hat.eval)
plot(rate.cate, main = "TOC: By decreasing estimated CATE")
rate.educ.rate <- rank_average_treatment_effect(
tau.forest,
covariates$education_rate,
subset = !is.na(covariates$education_rate) # Ignore missing X-values
)
plot(rate.educ.rate, xlab = "Treated fraction", ylab = "Increase in divorce rates", main = "TOC: By increasing education rate")
rate.educ.rate
educ_toc <- rate.educ.rate$TOC
head(educ_toc)
educ_toc <- rate.educ.rate$TOC
ggplot(educ_toc, aes(x = q, y = estimate)) +
geom_point() +
geom_errorbar(
aes(
ymin = estimate - 1.96*std.err,
ymax = estimate + 1.96*std.err
),
width = 0.02
) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(
x    = "Treated fraction (q)",
y    = "Increase in divorce rates",
title= "TOC: By increasing education rate"
)
# Define file path conditionally
if (user == "stefanograziosi") {
filepath <- "/Users/stefanograziosi/Desktop/temporary"
}
user <- Sys.info()["user"]
print(user)
# Define file path conditionally
if (user == "stefanograziosi") {
filepath <- "/Users/stefanograziosi/Desktop/temporary"
}
library(grf)
library(stargazer)
library(dplyr)
library(ggplot2)
Data <- file.path(filepath, "expanded_data.csv")
expanded_data <- read.csv(file = Data)
View(expanded_data)
# Data Prep:
data68 <- expanded_data %>%
filter(year == 1968)
data78 <- expanded_data %>%
filter(year == 1978) %>%
select(st, county_id, div_rate_sim)
# Calculate first difference: Same-county divorce rate between years
data_diff <- data68 %>%
inner_join(data78, by = c("st", "county_id") , suffix = c("_68", "_78")) %>%
mutate(diff_div_rate = div_rate_sim_78 - div_rate_sim_68)
# Add Treatment (introduction of divorce laws)
data_diff <- data_diff %>%
mutate(T = ifelse(lfdivlaw >= 1968 & lfdivlaw <= 1978, 1, 0))
## EXERCISE A
# Set up and Training
# dependent variable
Y <- data_diff$diff_div_rate
# treatment yes/no
W <- data_diff$T
# controls
X <- data_diff[, 4:16]
X <- X %>%
mutate(urban_dummy = as.integer(urbanization == "Urban")) %>%
mutate(urbanization = NULL)
tau.forest <- causal_forest(X, Y, W)
tau.hat.oob <- predict(tau.forest)
hist(tau.hat.oob$predictions)
cate <- average_treatment_effect(tau.forest,  target.sample = "all")
print(cate)
catt <- average_treatment_effect(tau.forest, target.sample = "treated")
cate_value <- cate[1]
cate_se <- cate[2]
ci_lower95 <- cate_value - 1.96 * cate_se
ci_upper95 <- cate_value + 1.96 * cate_se
cat(ci_lower95, ",", ci_upper95)
# Significance of CATT:
catt_value <- catt[1]
catt_se <- catt[2]
ci_lower95_t <- catt_value - 1.96 * catt_se
ci_upper95_t <- catt_value + 1.96 * catt_se
cat(ci_lower95_t, ",", ci_upper95_t)
# CATT not statistically significant different from zero
blp_grf <- best_linear_projection(tau.forest, X)
print(blp_grf)
train.forest <- causal_forest(X[train, ], Y[train], W[train])
