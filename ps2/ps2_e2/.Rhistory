# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county, div_rate_diff)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county"))
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
# View the first few rows of the new dataframe
head(final_df)
View(final_df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
# View the first few rows of the new dataframe
df$div_rate_diff.x <- NULL
head(final_df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
updated_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
final_df <- updated_df %>%
group_by(state_id) %>%
filter(any(year >= 1968 & year <= 1978 & lfdivlaw == 1)) %>%
ungroup()
head(final_df)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(treated = case_when(
lfdivlaw >= 1969 & lfdivlaw <= 1973 ~ 1,
TRUE ~ NA)
)
# We tried defining as factors but some grf functions only work with numbers.
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
head(df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
updated_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
final_df <- updated_df %>%
group_by(state_id) %>%
filter(any(year >= 1968 & year <= 1978 & lfdivlaw == 1)) %>%
ungroup()
head(final_df)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(treated = case_when(
lfdivlaw >= 1969 & lfdivlaw <= 1973 ~ 1,
TRUE ~ NA)
)
# We tried defining as factors but some grf functions only work with numbers.
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
head(df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
head(final_df)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(treated = case_when(
lfdivlaw >= 1969 & lfdivlaw <= 1973 ~ 1,
TRUE ~ NA)
)
# We tried defining as factors but some grf functions only work with numbers.
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
head(df)
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim[1978] - div_rate_sim[1968]) %>%
ungroup()
head(df)
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
head(df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
head(final_df)
View(final_df)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(treated = case_when(
lfdivlaw >= 1969 & lfdivlaw <= 1973 ~ 1,
TRUE ~ NA)
)
# We tried defining as factors but some grf functions only work with numbers
View(df)
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
head(df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
# I don't really understand how we created the .x and .y divorce rate variables -> STICK TO THE Y VERSION, IT IS CORRECT
head(final_df)
View(final_df)
#| label: Create variable names
# The outcome Y (must be a numeric vector with no NAs).
outcome <- final_df$div_rate_sim.y
# The treatment assignment W (must be a binary or real numeric vector with no NAs).
final_df$treated <- ifelse(final_df$year >= df$lfdivlaw, 1, 0)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(treated = case_when(
lfdivlaw >= 1969 & lfdivlaw <= 1973 ~ 1,
TRUE ~ NA)
)
# We tried defining as factors but some grf functions only work with numbers
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
head(df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
# I don't really understand how we created the .x and .y divorce rate variables -> STICK TO THE Y VERSION, IT IS CORRECT
head(final_df)
#| label: Load the relevant libraries
# For this assignment specifically
library(grf)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
library(fastDummies)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
# IMPORTANT: run twice to solve the errors
#| label: Cleaning and fixing dummies
data_url <- "https://raw.githubusercontent.com/stfgrz/20295-microeconometrics-ps/5c6aebedcdd74f0e85b270c2d25c9e0c9f5501aa/ps2/ps2_data/expanded_data.csv"
df <- read.csv(data_url)
# Define `urbanization` as a number (dummy)
df$urbanization_dummy <- as.numeric(df$urbanization == "Rural")
# Here, 0 = `Urban` and 1 = `Rural`
# Define `st` as a number
df$state_id <- as.numeric(as.factor(df$st))
# Here, the state IDs are assigned in alphabetical order
# Define the treatment dummy
df <- df %>%
mutate(treated = case_when(
lfdivlaw >= 1969 & lfdivlaw <= 1973 ~ 1,
TRUE ~ NA)
)
# We tried defining as factors but some grf functions only work with numbers
#| label: Preparing the dataset
df <- df %>%
arrange(state_id, county_id, year) %>%
group_by(state_id) %>%
mutate(div_rate_diff = div_rate_sim - lag(div_rate_sim)) %>% # I just wanted to test if `lag` works
ungroup()
head(df)
# Create a baseline data frame containing the covariates from 1968.
# Adjust the select() call if you want to include only specific baseline variables.
baseline_df <- df %>%
filter(year == 1968)
# Optionally, specify only a subset of columns:
# select(state_id, county, covariate1, covariate2, ..., other_covariates)
# Create a data frame for first differences for the year 1978.
diff1978_df <- df %>%
filter(year == 1978) %>%
select(state_id, county_id, div_rate_diff)
# Merge the baseline covariates with the first difference variable.
# This assumes each unit (combination of state and county) is present in both subsets.
final_df <- left_join(baseline_df, diff1978_df, by = c("state_id", "county_id"))
# I don't really understand how we created the .x and .y divorce rate variables -> STICK TO THE Y VERSION, IT IS CORRECT
head(final_df)
